if (process.env.NODE_ENV !== "production") {
  require("dotenv").config();
}
This code checks if the NODE_ENV environment variable is not set to "production", and if so, loads environment variables from a .env file using the dotenv library.

const express = require("express");
const app = express();
const port = 3000;
This code imports the express library and creates an instance of the express application. The port variable is set to 3000.

const bcrypt = require("bcrypt");
const passport = require("passport");
const flash = require("express-flash");
const session = require("express-session");
const methodOverride = require("method-override");
These lines import required libraries for encryption, authentication, and handling HTTP requests.

const initializePassport = require("./passport-config");
initializePassport(
  passport,
  (email) => users.find((user) => user.email === email),
  (id) => users.find((user) => user.id === id)
);
This code imports a function initializePassport from the passport-config.js file, and calls it with three arguments: the passport instance, a callback function to find a user by email, and a callback function to find a user by ID. These callbacks are used by Passport to authenticate users.

const users = [];
This creates an empty array to store user data.

app.set("view engine", "ejs");
app.use(express.urlencoded({ extended: false }));
app.use(flash());
app.use(
  session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
  })
);
app.use(passport.initialize());
app.use(passport.session());
app.use(methodOverride("_method"));
These lines configure the application's settings, middleware, and session handling. The view engine is set to ejs, the express.urlencoded middleware is used to parse incoming form data, and the flash, session, passport, and methodOverride middleware are used for authentication, session handling, and HTTP request handling.

app.get("/", checkAuthenticated, (req, res) =>
  res.render("index.ejs", { name: req.user.name })
);
This code sets up a route handler for the root URL of the application. The checkAuthenticated middleware function is used to ensure that only authenticated users can access the page. If the user is authenticated, the index.ejs template is rendered with the user's name passed as context.

app.get("/login", checkNotAuthenticated, (req, res) => res.render("login.ejs"));
This code sets up a route handler for the login URL of the application. The checkNotAuthenticated middleware function is used to ensure that only unauthenticated users can access the page. If the user is unauthenticated, the login.ejs template is rendered.

app.post(
  "/login",
  checkNotAuthenticated,
  passport.authenticate("local", {
    successRedirect: "/",
    failureRedirect: "/login",
    failureFlash: true,
  })
);
This code sets up a route handler for the login form submission. The checkNotAuthenticated middleware function is used to ensure that only unauthenticated users can submit the form. Passport's authenticate method is used with the "local" strategy to authenticate the user. If authentication is successful, the user is redirected to the root URL, otherwise they are redirected back to the login page with a flash message.

app.get("/register", checkNotAuthenticated, (req, res) =>
  res.render("register.ejs")
);
This code sets up a route handler for the register URL of the application. The checkNotAuthenticated middleware function is used to ensure that only unauthenticated users can access the page. If the user is unauthenticated, the register.ejs template is rendered.

app.post("/register", checkNotAuthenticated, async (req, res) => {
  try {
    users.push({
      id: Date.now().toString(),
      name: req.body.name,
      email: req.body.email,
      password: await bcrypt.hash(req.body.password, 10),
    });
  } catch {
    res.redirect("/register");
  }
  res.redirect("/login");
  console.log(users);
});
This code sets up a route handler for the registration form submission. The checkNotAuthenticated middleware function is used to ensure that only unauthenticated users can submit the form. The user's data is added to the users array after hashing the password using the bcrypt library. If an error occurs during registration, the user is redirected back to the registration page. Otherwise, the user is redirected to the login page.

app.delete("/logout", (req, res) => {
  req.logOut(function (err) {
    if (err) {
      return next(err);
    }
    res.redirect("/");
  });
});
This code sets up a route handler for the logout URL of the application. The req.logOut method is used to log out the user and redirect them to the root URL.

function checkAuthenticated(req, res, next) {
  if (req.isAuthenticated()) {
    return next();
  }
  res.redirect("/login");
}
This code defines a middleware function checkAuthenticated that checks whether the user is authenticated. If the user is authenticated, the next middleware or route handler is invoked. Otherwise, the user is redirected to the login page.

function checkNotAuthenticated(req, res, next) {
  if (req.isAuthenticated()) {
    return res.redirect("/");
  }
  next();
}
This code defines a middleware function checkNotAuthenticated that checks whether the user is unauthenticated. If the user is unauthenticated, the next middleware or route handler is invoked. Otherwise, the user is redirected to the root URL.
